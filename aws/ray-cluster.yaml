AWSTemplateFormatVersion: '2010-09-09'
Description: 'Ray Cluster Infrastructure Setup - Complete Configuration'

Parameters:
  Environment:
    Type: String
    Default: 'production'
    AllowedValues:
      - 'development'
      - 'staging'
      - 'production'
    Description: Environment for resource tagging

  ProjectName:
    Type: String
    Default: 'ray-cluster'
    Description: Project name for resource tagging

  VpcCidr:
    Type: String
    Default: '172.30.0.0/16'
    Description: CIDR block for VPC
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  
  SubnetCidr:
    Type: String
    Default: '172.30.0.0/24'
    Description: CIDR block for Subnet
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

  AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: 'us-west-2a'
    Description: Availability Zone for the subnet

  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair for SSH access

  AllowedIpRange:
    Type: String
    Default: '0.0.0.0/0'
    Description: CIDR block allowed to access the cluster
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

  RayAmiId:
    Type: AWS::EC2::Image::Id
    Default: 'ami-05c1fa8c9881244b6'
    Description: AMI ID for Ray nodes (Deep Learning Base AMI with NVIDIA driver)

Mappings:
  EnvironmentMap:
    development:
      instanceType: 't3.xlarge'
    staging:
      instanceType: 'c5.2xlarge'
    production:
      instanceType: 'c5.2xlarge'

Conditions:
  IsProduction: !Equals [!Ref Environment, 'production']

Resources:
  # VPC and Network Configuration
  RayVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-vpc
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  RayInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-igw
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref RayVPC
      InternetGatewayId: !Ref RayInternetGateway

  RaySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RayVPC
      CidrBlock: !Ref SubnetCidr
      AvailabilityZone: !Ref AvailabilityZone
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-subnet
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  RayRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref RayVPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-routetable
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  RayRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RayRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref RayInternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref RaySubnet
      RouteTableId: !Ref RayRouteTable

  # Security Group
  RaySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Ray security group
      VpcId: !Ref RayVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedIpRange
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: !Ref AllowedIpRange
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: !Ref AllowedIpRange
        - IpProtocol: tcp
          FromPort: 8265
          ToPort: 8265
          CidrIp: !Ref AllowedIpRange
        - IpProtocol: tcp
          FromPort: 10001
          ToPort: 10001
          CidrIp: !Ref AllowedIpRange
        - IpProtocol: tcp
          FromPort: 10000
          ToPort: 19999
          CidrIp: !Ref AllowedIpRange
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref AllowedIpRange
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-sg
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  RaySecurityGroupSelfReference:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RaySecurityGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref RaySecurityGroup

  # IAM Configuration
  RayInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-role-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: !Sub ${ProjectName}-autoscaler-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:RunInstances
                  - ec2:TerminateInstances
                  - ec2:CreateTags
                  - ec2:DescribeInstances
                  - iam:PassRole
                  - iam:CreateRole
                  - iam:PutRolePolicy
                Resource: '*'
        - PolicyName: !Sub ${ProjectName}-cluster-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeKeyPairs
                  - ec2:RunInstances
                  - ec2:CreateKeyPair
                  - ec2:ImportKeyPair
                  - ec2:DeleteKeyPair
                Resource: '*'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  RayInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      InstanceProfileName: !Sub ${ProjectName}-profile-${Environment}
      Roles:
        - !Ref RayInstanceRole

Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref RayVPC
    Export:
      Name: !Sub "${AWS::StackName}-VpcId"

  SubnetId:
    Description: Subnet ID
    Value: !Ref RaySubnet
    Export:
      Name: !Sub "${AWS::StackName}-SubnetId"

  SecurityGroupId:
    Description: Security Group ID
    Value: !Ref RaySecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroupId"

  InstanceProfileArn:
    Description: Instance Profile ARN
    Value: !GetAtt RayInstanceProfile.Arn
    Export:
      Name: !Sub "${AWS::StackName}-InstanceProfileArn"

  InstanceProfileName:
    Description: Instance Profile Name
    Value: !Ref RayInstanceProfile
    Export:
      Name: !Sub "${AWS::StackName}-InstanceProfileName"

  RayRoleName:
    Description: IAM Role Name
    Value: !Ref RayInstanceRole
    Export:
      Name: !Sub "${AWS::StackName}-RoleName"